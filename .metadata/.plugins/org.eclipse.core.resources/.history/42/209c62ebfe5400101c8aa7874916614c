package com.v.gatewayserver.security;


import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.util.UriComponentsBuilder;

import lombok.extern.slf4j.Slf4j;

import java.time.Instant;
import java.util.HashMap;
import java.util.Map;

@Slf4j
@Service
public class TokenManager {

    private final JwtTokenGeneratorService jwtService;
    private final RestTemplate restTemplate = new RestTemplate();

    private String accessToken;
    private Instant expiryTime;

    @Value("${keycloak.token-url}")
    private String tokenUrl;

    @Value("${keycloak.client-id}")
    private String clientId;

    public TokenManager(JwtTokenGeneratorService jwtService) {
        this.jwtService = jwtService;
    }

    public synchronized String getAccessToken() {
        if (accessToken == null || Instant.now().isAfter(expiryTime.minusSeconds(30))) {
            fetchNewToken();
        }
        return accessToken;
    }

    private void fetchNewToken() {
        String assertion = jwtService.generateClientAssertionJwt();

        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);

        Map<String, String> params = new HashMap<>();
        params.put("grant_type", "client_credentials");
        params.put("client_id", clientId);
        params.put("client_assertion_type", "urn:ietf:params:oauth:client-assertion-type:jwt-bearer");
        params.put("client_assertion", assertion);

        HttpEntity<String> request = new HttpEntity<>(
                UriComponentsBuilder.newInstance()
                        .queryParam("grant_type", params.get("grant_type"))
                        .queryParam("client_id", params.get("client_id"))
                        .queryParam("client_assertion_type", params.get("client_assertion_type"))
                        .queryParam("client_assertion", params.get("client_assertion"))
                        .build()
                        .toUriString()
                        .substring(1), // remove starting ?
                headers
        );

        ResponseEntity<Map> response = restTemplate.exchange(
                tokenUrl, HttpMethod.POST, request, Map.class
        );

        if (response.getStatusCode() == HttpStatus.OK && response.getBody() != null) {
            this.accessToken = (String) response.getBody().get("access_token");
            Integer expiresIn = (Integer) response.getBody().get("expires_in");
            this.expiryTime = Instant.now().plusSeconds(expiresIn);
            log.info("Fetched new access token, valid for {} seconds", expiresIn);
        } else {
            throw new RuntimeException("Failed to fetch token: " + response.getStatusCode());
        }
    }
}
