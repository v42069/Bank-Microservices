package com.v.accounts.service.impl;

import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;

import com.v.accounts.dto.CustomerDetailsDto;
import com.v.accounts.dto.CustomerDto;
import com.v.accounts.entity.Accounts;
import com.v.accounts.entity.Customer;
import com.v.accounts.exceptions.ResourceNotFoundException;
import com.v.accounts.repository.AccountsRepository;
import com.v.accounts.repository.CustomerRepository;
import com.v.accounts.responsestructure.ResponseStructure;
import com.v.accounts.service.ICustomerService;
import com.v.accounts.service.client.CardsFeignClient;
import com.v.accounts.service.client.LoansFeignClient;

import lombok.AllArgsConstructor;

@AllArgsConstructor
@Service
public class CustomerServiceImpl implements ICustomerService{
	
	private AccountsRepository accountsRepository;
	
	private CustomerRepository customerRepository;
	
	private CardsFeignClient cardsFeignClient;
	
	private LoansFeignClient loansFeignClient;
//
//	@Override
//	public CustomerDetailsDto fetchCustomerDetails(String mobileNumber) {
//		// TODO Auto-generated method stub
//		Customer customer = customerRepository.findByMobileNumber(mobileNumber)
//				.orElseThrow(() -> new ResourceNotFoundException("Customer", "mobileNumber", mobileNumber));
//		Accounts account = accountsRepository.findByCustomerId(customer.getCustomerId()).orElseThrow(
//				() -> new ResourceNotFoundException("Account", "customerId", customer.getCustomerId().toString()));

//		CustomerDto customerDto = customerMapper.toDto(customer);
//		customerDto.setAccountsDto(accountMapper.toDto(account));
//		return ResponseStructure.<CustomerDetailsDto>builder().data(customerDto).message("Details Fetched")
//				.statusCode(HttpStatus.OK.value()).build();
	}

}
