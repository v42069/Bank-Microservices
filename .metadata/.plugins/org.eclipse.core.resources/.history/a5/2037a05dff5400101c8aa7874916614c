import lombok.extern.slf4j.Slf4j;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.reactive.function.BodyInserters;
import org.springframework.web.reactive.function.client.WebClient;
import reactor.core.publisher.Mono;

import javax.annotation.PostConstruct;
import java.time.Instant;
import java.util.Map;

@Slf4j
@Service
public class TokenManager {

	@Autowired
    private final JwtTokenGeneratorService jwtService;
    private final WebClient webClient;

    private String accessToken;
    private Instant expiryTime;

    @Value("${keycloak.token-url}")
    private String tokenUrl;

    @Value("${keycloak.client-id}")
    private String clientId;

    public TokenManager(JwtTokenGeneratorService jwtService) {
        this.jwtService = jwtService;
        this.webClient = WebClient.builder().build();
    }

    public synchronized String getAccessToken() {
        if (accessToken == null || Instant.now().isAfter(expiryTime.minusSeconds(30))) {
            fetchNewToken();
        }
        return accessToken;
    }

    private void fetchNewToken() {
        String assertion = jwtService.generateSignedJwt();

        Map<String, String> formData = Map.of(
                "grant_type", "client_credentials",
                "client_id", clientId,
                "client_assertion_type", "urn:ietf:params:oauth:client-assertion-type:jwt-bearer",
                "client_assertion", assertion
        );

        Map<String, Object> response = webClient.post()
                .uri(tokenUrl)
                .contentType(MediaType.APPLICATION_FORM_URLENCODED)
                .body(BodyInserters.fromFormData(formData))
                .retrieve()
                .bodyToMono(Map.class)
                .block();

        if (response != null && response.containsKey("access_token")) {
            this.accessToken = (String) response.get("access_token");
            Integer expiresIn = (Integer) response.get("expires_in");
            this.expiryTime = Instant.now().plusSeconds(expiresIn);
            log.info("Fetched new access token, valid for {} seconds", expiresIn);
        } else {
            throw new RuntimeException("Failed to fetch token from Keycloak.");
        }
    }
}
