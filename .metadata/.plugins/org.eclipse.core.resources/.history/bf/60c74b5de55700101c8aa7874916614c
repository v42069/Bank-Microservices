package com.v.gatewayserver.config;

import javax.crypto.spec.SecretKeySpec;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.convert.converter.Converter;
import org.springframework.http.HttpMethod;
import org.springframework.security.authentication.AbstractAuthenticationToken;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.ServerHttpSecurity;
import org.springframework.security.oauth2.jwt.Jwt;
import org.springframework.security.oauth2.jwt.NimbusReactiveJwtDecoder;
import org.springframework.security.oauth2.jwt.ReactiveJwtDecoder;
import org.springframework.security.oauth2.server.resource.authentication.JwtAuthenticationConverter;
import org.springframework.security.oauth2.server.resource.authentication.ReactiveJwtAuthenticationConverterAdapter;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.server.SecurityWebFilterChain;

import reactor.core.publisher.Mono;

@Configuration
@EnableWebFluxSecurity
public class SecurityConfig {

	@Bean
	public SecurityWebFilterChain webFilterChain (ServerHttpSecurity httpSecurity) {
		
		return httpSecurity.authorizeExchange(exchanges->exchanges
//			.anyExchange().authenticated()//authenticate all api
//			.anyExchange().permitAll()//allow access to all api without authentication
			.pathMatchers(HttpMethod.GET).permitAll()//allow only get request api
            .pathMatchers("/eazybank/accounts/**").hasRole("ACCOUNTS")
            .pathMatchers("/eazybank/cards/**").hasRole("CARDS")
            .pathMatchers("/eazybank/loans/**").hasRole("LOANS"))
		.oauth2ResourceServer(oauth2ResourceServer -> oauth2ResourceServer
				.jwt(jwtSpec -> jwtSpec.jwtAuthenticationConverter(grantedAuthoritiesExtractor())))
		.csrf(ccsrf->ccsrf.disable())
		.build();
		
	}
	
    private Converter<Jwt, Mono<AbstractAuthenticationToken>> grantedAuthoritiesExtractor() {
        JwtAuthenticationConverter jwtAuthenticationConverter =
                new JwtAuthenticationConverter();
        jwtAuthenticationConverter.setJwtGrantedAuthoritiesConverter
                (new KeycloakRoleConverter());
        return new ReactiveJwtAuthenticationConverterAdapter(jwtAuthenticationConverter);
    }
}

